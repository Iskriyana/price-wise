Agentic Pricing and Promotion Planning System for Retail (Room Number 4)




Please make a copy of this document and modify it for your team
Have you read these (Please read these guidelines) ?
1. https://maven.com/aishwarya-kiriti/genai-system-design/cohort-2/syllabus/modules/58d01a?item=8d924085a81f32d6
2. https://maven.com/aishwarya-kiriti/genai-system-design/cohort-2/syllabus/modules/58d01a?item=d7v2fjfu3j
2. Collaboration & Roles
Your final deliverable is a presentation showcasing your design, iterations, and (optionally) your build. Collaboration is key. Use the shared scratchpad (will be provided as a Google doc) as your workspace.
During the first 5 minutes of brainstorming, decide who takes on which roles—though you’re free to contribute across areas as needed:
* Writer/Designer: Documents ideas and designs the solution.
   * Adithi, Venkat, Issi
* Researcher: Gathers best practices and optimization strategies.
   * Venkat, Lalitha, Adithi
* Brainstormers/Strategy Heads: Shape the approach and plan iterations.
   * Abhijith, Bhargav, Issi
* Builder/Engineer (Optional): Implements and tests the system.
   * Issi, Lalitha, Abhijith, Bhargav
* Presenters: Deliver the final demo.
   * TBD


________________
Step 1: Scoping Your Project 


PROJECT DESCRIPTION: Retailers often fail to respond quickly to demand shifts or competitor moves. An agentic system can monitor real-time sales, competitor prices, and stock levels, simulate pricing impacts, and push approved changes directly to digital and in-store systems. (Source)


One team member can jot down 1-2 lines summarizing the team’s decisions for each question below. Aim to complete this in 10-15 minutes.
1. What real-world problem does your AI system aim to solve?
   1. To enable the Pricing Analysts arrive at optimal pricing, at scale, based on competitor prices, real-time sales and stock levels 

   2. Why is this problem important and relevant today?
   1. Pricing in Retail is a thin-margin game. Pricing Analysts need to ensure their products are priced competitively as well as profitably. 
   2. Lost sales due to non-competitive pricing or stockouts.
   3. Margin erosion from over-discounting or delayed markdowns.
   4. Inventory imbalances, increasing holding costs or write-offs.
   5. Customer churn due to inconsistent experience across channels
   6. Price Changes have to be near real-time

      3. Why is generative AI a good fit for this problem?
      1. Pricing Analysts are typically non-technical. Generative AI would provide them the option to interact in natural (human) language.
      2. Traditional pricing models are typically slow and also cannot process multi-dimensional calculations for modelling and responding to real-time price change needs.
      3. Consolidated pricing decisions from multiple sources at scale

         4. Which models are you considering, and why? It’s okay to list 3-4 top models, don't overthink it. Align your choices with the course pillars. You can explore models from the leaderboard here: https://lmarena.ai/
Note: For the scope of this capstone, you’ll select your models once at the beginning. You don’t need to revisit model selection with every iteration—it can get confusing and distract from the design focus.
Gemini - Long Context not needed for this use-case
Between Claude 3 Opus & OpenAI (gpt-4o), we opted for gpt-4o considering the Effort required.


Must-Have features:
            1. Simulation
            2. Ability to fetch competitor / industry benchmark prices in real-time
            3. Ability to respond to sales or customer behavior in real-time
            4. Natural language querying
            5. Ability to fetch real-time stock levels / inventory data
            6. Ability to involve a human-in-the-loop for decisions beyond a certain threshold vs. automatically pushing the pricing decision if it’s below the threshold [Threshold criteria to be decided]


            5. Based on your must-have features, where should you start?
Options:
               * Workflow Agents only
               * Workflow Agents + RAG
               * Agents (Level 2)
               * Multi-Agents
V1: Workflow + RAG 
V2: Workflow + RAG + planning + memory (a single agent)
V3: Workflow + RAG + tooling + MCP / If too confusing - a multi-agent system 
If you initially select Agents or Multi-Agents, revisit your problem—can you simplify it to start with workflow-based methods? Never start with agents as your first prototype. They can make the system very unpredictable.
For the scope of this capstone, we won't consider fine-tuning. It requires a lot of benchmarking and data to make informed decisions.
               7. Do you have any other business constraints (cost, compute, security, etc.)? List them here and keep them in mind during your design.
TBD
                  1. Security / Guardrails 
                  1. Protection against internal fraud
                  2. Protection against external fraud - keep pricing strategies secure
                  2. Cost - the system will involve multiple LLMs, especially with increasing complexity
                  3. Latency - in order to be effective, the system must provide near real-time analysis and recommendations (at the push of a button 😀)
                  4. Reliability - pushing the right prices to live systems
________________


Step 2: Iterative Solution Design 
One team member can jot down 1-2 lines summarizing the team’s decisions for each question below, read guidance for iteration design. Aim to complete this in 10-15 minutes.
0. Iterations
What are the 3 iterations of your problem?
Start by outlining three iterations. You can refine them later as you work through the following sections. This is just a starting point—you don’t need all the details upfront.
TBD
General assumption: online 


Iteration 1 (1-2 lines):
An AI-powered analyst assistant that uses RAG to answer queries about pricing by pulling from real-time sales and competitor data to generate a recommendation report for a human analyst. (Workflow + RAG)

Iteration 2 (1-2 lines):
A semi-autonomous agent that not only generates a pricing recommendation but also uses a tool to simulate the financial impact of that recommendation, presenting both to a human for approval. (Workflow + RAG + planning + memory (a single agent)) → intra-category, operation research problem (multiple SKUs)

Iteration 3 (1-2 lines):
A single agent with multiple tools / only if “confusing” - a multi-agent system that autonomously monitors market triggers, delegates simulation and analysis to specialized agents, and drafts notifications for team review, with the final step of pushing changes requiring human sign-off. (Workflow + RAG +  tooling + MCP (multiple tools))


Guidance:
Start with a simple prompt-based workflow agent and improve it iteratively by adding features and complexity. This structured approach helps you think critically about design choices and system scope.
Iteration Ideas:
                  * Enhancing Workflow Complexity: Start simple and gradually expand capabilities.
                  * Adding Retrieval Components: Integrate Retrieval-Augmented Generation (RAG) to improve information access and accuracy.
                  * Increasing Autonomy: Move toward agents or multi-agent systems that can make decisions with less human input.
For some projects, starting directly with RAG might make sense—feel free to adjust based on your use case. Each iteration should be intentional and measurable, applying optimization techniques and best practices from the course.
________________




Once you have a rough idea of your iterations, start designing them. Remember, as you fill in the details below, you might realize that your initial iteration plan needs adjustment — and that’s completely fine. You can always go back and revise your iterations.
Spend around 15-20 minutes on each iteration. If you’re able to sketch rough flowcharts of your design directly in the poster template, even if messy, that would be great!
You’ll copy the below structure for each iteration and use it to brainstorm ideas that will later feed into your poster template.
________________


Iteration 1 
1. Architecture & Design
New Features:
What new features or capabilities are you adding in this iteration? List them.
A question-answering system for pricing strategy, grounded in real-time data. The LLM will query from an internal database to get the answers and do a computation to generate a price recommendation. 
                  * Per SKU
Usage Paradigm:
Which approach fits this iteration best? Choose one:
                  * Workflow Agents
                  * Retrieval-Augmented Generation (RAG)
                  * Agents
                  * Multi-Agent Systems
RAG (discuss with instructors)
Architecture Diagram:
Sketch a rough block diagram to visualize your design flow. Use tools like Excalidraw, Canva, or draw directly in your presentation template.
Sources: 
                  * https://excalidraw.com/
                  * https://www.eraser.io/ 
                  * https://www.canva.com/ 
  

TODO: 
                  * Add a conditional edge (HITL)
                  * Mathematical threshold checks + the right SKUs - intermediate step after the SQL query 
                  * Mathematical threshold checks after the guardrails recommendation
Sample Inputs:
What inputs will your system take in this iteration? Think carefully about what the system needs to function.
                  * For Workflow Agents: Mostly system and user prompts.
                  * For RAG: Prompts plus the right context. What should your context ideally contain?
                  * For Agents: Inputs may include prompts, context, and memory (short or long-term).
If your system has multiple steps, consider any intermediate inputs. A block diagram helps map this out.
Our assumptions: 
                  * To simplify the initial iteration, we will assume that competitor pricing data has already been scraped and is available in a database. 
                  * We will further assume that product matching has been resolved and that we can compare products using a common identifier like a  Universal Product Code (UPC, United States and Canada) or Global Trade Item Number (GTIN, global standard), allowing the system to focus on the core RAG workflow without the added complexity of real-time scraping and semantic matching (for the titles)
See CSV in SLACK @Issi - add to the GDrive folder
The right context = data sources: 
                  * Internal DB or API for competitor prices 
                  * Internal DB for stock levels
Example: 
A user query from a pricing analyst, e.g., "What is the recommended price for Product SKU /UPC / GTIN #12345 given that our main competitor lowered their price by 10% yesterday?". 
EDGE CASES we can add them to the presentation 
                  * Max out inventory - max price
                  * A lot of inventory - bottom price
Expected Outputs:
What should the outputs look like? A simple description is enough—no need for exact sample responses.
A structured text report summarizing the current market situation, supporting data, and a clear pricing recommendation. (at SKU level)
                  * Table with the product, product_id, approval threshold, recommended price and short reasoning 
Intermediate Steps / Notes:
Do you need to capture any intermediate logic or decisions (e.g., classification gates, routing logic)?
!!!! Mathematical validation against price and stock thresholds !!!! - see diagram
Additional Components:
Beyond LLMs and orchestration, do you need any additional services or tools? For example:
                  * For RAG, brainstorm requirements for choosing a vector database. Consider properties like latency, search type, filtering, etc. (Reference: https://superlinked.com/vector-db-comparison)
                  * [Optional] Any chunking, embedding, or data parsing requirements? Sometimes it's not easy to make these decisions without data, so don't sweat it.
NO additional ones
Tool Usage (if needed):
If your system needs external tools or APIs, list them here (e.g., Gmail API, Slack client, Weather app, Calculator).
NO pending on validating results with experimentation (Calculator to be considered)
________________


2. If Using Autonomous Agents (if applicable)
                  * Do you need memory? If yes, what type—short-term or long-term? Look up Lesson 7 for resources
                  * Would multi-agents be used? If yes, what model fits—hierarchical (one orchestrator) or flat (peer-to-peer communication)?
                  * What context would each agent need to perform its tasks?
________________


3. Evaluation & Optimization
                  * For each major component, define how you’ll evaluate it. Refer to the evaluation metrics from Lesson 8  
                  * Are there any intermediate metrics that would help track progress?
                  * What optimization techniques make sense based on your data, goals, or constraints? Reference Lessons 5 & 6 for ideas.
Evaluation Metrics
Context Recall: To ensure all relevant competitor and sales data points are retrieved.
Hallucination Score: To verify the generated recommendation is factually consistent with the retrieved data. → Run same product more than once and get the same results. 
Context Precision: To verify the retrieved data is aligned with the SKU or product requested.
  

Optimisation techniques: 
To tool or not to tool 🙂- check, if the cost and accuracy change
Answer Relevance: To ensure the report directly addresses the analyst's query. 
Hybrid Search: To combine keyword-based search for specific product SKUs with semantic search for understanding the analyst's intent. 
________________


4. Cost, Latency & Effort Analysis
                  * Call out anything in this iteration that adds cost or latency. You don’t need to calculate—just list the key factors. Refer to Lesson 9 for ideas
                  * Use this rough rule of thumb for effort levels:
                  * Model changes > Pipeline changes > Prompt updates (most to least effort)
Cost/Latency Factors: Costs will arise from the LLM API call and the latency associated with retrieving data.
                  * Latency per product 
Effort: Medium. Requires setting up a RAG pipeline and data ingestion process.


________________


5. Business & Compliance Considerations
                  * What guardrails are needed for safety and reliability? Briefly describe what you’d implement (e.g., AI model, heuristic, validation step). Reference
                  * Are there compliance needs specific to your use case or industry?
                  * How will you handle data privacy, security, and regulatory concerns in your design?


                  * Guardrails: 
                  * Implement a factual consistency check using an comparisons to labelled data as groundtruth to ensure the output is grounded in the retrieved context. 
                  * The system will enforce guardrails to ensure analysts can only price products within their assigned categories, preventing both errors and unauthorized changes. Preferably, this can be handled by the platform's authentication system in order to avoid complexity in the AI system.
                  * Input guardrail - it should be asking ONLY pricing-related questions 
                  * Consider - not greater than the MRP, margin etc. 
                  * Data access will be restricted to authorized analysts.
                  * Different personas - here only one 
                  * Different levels within the hierarchy - analyst, CFO etc. . If we can constrict the access at the platform system; avoid complexity in the AI system
                  * The software responsible for the price update will handle the permissions 
                  * Concurrency
                  * Define it in the software system (for example only a particular category is assigned to an analyst);
________________


Iteration 2
1. Architecture & Design
New Features:
What new features or capabilities are you adding in this iteration? List them.
Our assumption for this stage: homogenous demographics
                  * In Iteration 2, the system evolves into a semi-autonomous agent, driven by the primary need to perform complex intra-category optimization. 
                  * The agent will be tasked with making pricing decisions across multiple SKUs simultaneously to meet overarching business goals, such as achieving a specific category-wide profit margin. 
                  * To manage this significantly expanded decision space compared to Iteration 1, an agent will be equipped with a tool. 
                  * A key capability is the use of a financial simulation tool, which allows the agent to proactively model the impact of various pricing strategies. Output of simulation → show me 3 scenarios - conservative, middle, aggressive 
                  * Furthermore, it will utilize a semantic similarity tool to conduct more dynamic, real-time product matching from scraped e-commerce data, enhancing its ability to make informed, data-driven recommendations.
Usage Paradigm:
Which approach fits this iteration best? Choose one:
                  * Workflow Agents
                  * Retrieval-Augmented Generation (RAG)
                  * Agents
                  * Multi-Agent Systems
Agents (One)
Architecture Diagram:
Sketch a rough block diagram to visualize your design flow. Use tools like Excalidraw, Canva, or draw directly in your presentation template.
  

Sources: 
                  * https://excalidraw.com/
                  * https://www.eraser.io/ 
                  * https://www.canva.com/ 
                  * Simple linear program tool for revenue optimisation in the context of the category 
Sample Inputs:
What inputs will your system take in this iteration? Think carefully about what the system needs to function.
                  * For Workflow Agents: Mostly system and user prompts.
                  * For RAG: Prompts plus the right context. What should your context ideally contain?
                  * For Agents: Inputs may include prompts, context, and memory (short or long-term).
If your system has multiple steps, consider any intermediate inputs. A block diagram helps map this out.
User query or a system-detected event (e.g., large inventory increase). The agent will also use intermediate inputs from its tool.
                  * We will further assume that product matching has been resolved and that we can compare products using a common identifier like a  Universal Product Code (UPC, United States and Canada) or Global Trade Item Number (GTIN, global standard), allowing the system to focus on the core RAG workflow without the added complexity of real-time scraping and semantic matching  (for the product titles)
See CSV in SLACK @Issi - add to the GDrive folder
The right context = data sources: 
                  * Internal DB or API for competitor prices - scraping (if feasible, implement in demo)
                  * Internal DB for stock levels
Expected Outputs:
What should the outputs look like? A simple description is enough—no need for exact sample responses.
A structured text report summarizing the current market (our demand & competitors) situation, supporting data, and a clear pricing recommendation. (at SKU level)
                  * Table with the product, product_id, approval threshold, recommended price and short reasoning 
A pricing recommendation coupled with a "what-if" analysis showing projected impact on revenue and profit margin; includes explanation and action options (to accept or not)
                  * Scenarios for human approval  - conservative, middle, aggressive 
Intermediate Steps / Notes:
Do you need to capture any intermediate logic or decisions (e.g., classification gates, routing logic)?
!!!! Mathematical validation against price and stock thresholds !!!!
EDGE CASES PRESENTATION & DEMO
Additional Components:
Beyond LLMs and orchestration, do you need any additional services or tools? For example:
                  * For RAG, brainstorm requirements for choosing a vector database. Consider properties like latency, search type, filtering, etc. (Reference: https://superlinked.com/vector-db-comparison)
                  * [Optional] Any chunking, embedding, or data parsing requirements? Sometimes it's not easy to make these decisions without data, so don't sweat it.
Vector DB
Tool Usage (if needed):
If your system needs external tools or APIs, list them here (e.g., Gmail API, Slack client, Weather app, Calculator).
                  * Optimiser
                  * Scraper / API for real-time prices 
                  * Semantic Matcher
In this iteration, the system will introduce a new tool for semantic similarity search. This tool will allow the agent to perform more dynamic, real-time product matching by comparing product titles and descriptions when a clean, pre-matched UPC database is not available.
An API call to a simple financial model or calculator to simulate the impact of price changes. 
________________


2. If Using Autonomous Agents (if applicable)
                  * Do you need memory? If yes, what type—short-term or long-term? Look up Lesson 7 for resources
                  * Would multi-agents be used? If yes, what model fits—hierarchical (one orchestrator) or flat (peer-to-peer communication)?
                  * What context would each agent need to perform its tasks?


                  * Memory - yes - short-term (especially for scenarios) → start with episodic one
                  * Procedural Memory could potentially help us with the prompts 
                  * Context - SKU info, real-time info, simulation results 
  

________________


3. Evaluation & Optimization
                  * For each major component, define how you’ll evaluate it. Refer to the evaluation metrics from Lesson 8  
                  * Are there any intermediate metrics that would help track progress?
                  * What optimization techniques make sense based on your data, goals, or constraints? Reference Lessons 5 & 6 for ideas.
Evaluation:
                  * Semantic Matchig Evaluation CRITICAL - Very strict - apples to apples - product size for example 
                  * Scraping / Real-time prices & Semantic match   - we need to make sure these are the right ones with respect to groundtruth data 
                  * Tool Calling Accuracy: To measure if the agent correctly calls the simulation tool with the right parameters. 
                  * Task Success Rate: To evaluate if the agent successfully completes the end-to-end task of generating a recommendation and a valid simulation. 
Optimization:
                  * ReAct Pattern: This is ideal as the agent needs to synergize reasoning (deciding on a price) and acting (calling the simulation tool). 
                  * Short-Term Memory: Utilize a summarized history of the conversation to handle follow-up questions from the analyst regarding the simulation.
________________


4. Cost, Latency & Effort Analysis
                  * Call out anything in this iteration that adds cost or latency. You don’t need to calculate—just list the key factors. Refer to Lesson 9 for ideas
                  * Use this rough rule of thumb for effort levels:
                  * Model changes > Pipeline changes > Prompt updates (most to least effort)
Cost/Latency Factors: Additional latency and potential cost from the external tool/API call. Multiple LLM calls may be needed for the ReAct reasoning loop.
Effort: Medium-High. 
                  * Requires integration with an external API and more complex prompt engineering for agentic behavior. 
                  * Accuracy in tool calling


________________


5. Business & Compliance Considerations
                  * What guardrails are needed for safety and reliability? Briefly describe what you’d implement (e.g., AI model, heuristic, validation step). Reference
                  * Are there compliance needs specific to your use case or industry?
                  * How will you handle data privacy, security, and regulatory concerns in your design?


                  * Guardrails: 
                  * Implement a factual consistency check using an comparisons to labelled data as groundtruth to ensure the output is grounded in the retrieved context. 
                  * The system will enforce guardrails to ensure analysts can only price products within their assigned categories, preventing both errors and unauthorized changes. Preferably, this can be handled by the platform's authentication system in order to avoid complexity in the AI system.
                  * Input guardrail - it should be asking ONLY pricing-related questions 
                  * Consider - not greater than the MRP, margin etc. 
                  * Data access will be restricted to authorized analysts.
                  * Different personas
                  * Different levels within the hierarchy - analyst, CFO etc. . If we can constrict the access at the platform system; avoid complexity in the AI system
                  * The software responsible for the price update will handle the permissions 
                  * Concurrency
                  * Define it in the software system (for example only a particular category is assigned to an analyst);


________________


Iteration 3
1. Architecture & Design
New Features:
What new features or capabilities are you adding in this iteration? List them.
                  * The agent’s capabilities are expanded to include an autonomous monitoring and planning workflow. It will now proactively scan for market triggers - such as competitor price changes or shifts in demand - and initiate a pricing analysis using its expanded set of tools, all without direct user input.
                  * Geographic pricing capabilities are introduced, allowing the agent to implement differential pricing strategies by considering the customer's location, regional demand, and local stock levels.
                  * The agent integrates new external data sources, including macroeconomic data, to consider broader market trends in its pricing recommendations.
                  * To enhance seasonality-based pricing, the agent utilizes new tools, such as a weather tool that leverages customer ZIP codes to make more accurate decisions for weather-dependent products.
                  * The agent's actionability is increased, giving it the capability to execute an approved price change by pushing it directly to the relevant sales systems.
                  * A multi-agent architecture will only be considered as a design alternative if the primary, single-agent approach struggles with tool confusion or overload, where it cannot reliably select the correct tool from its extensive toolkit.
                  * Triggers - manual or event (campaign, stock change, cost change, competitor change)
                  * Guardrails upgrades
                  * (JUST-IN-TIME pricing, hyperpersonalisation; also check with legal; cool case for RAG guardrails)
                  * LLM as a judge for semantic match accuracy 
Usage Paradigm:
Which approach fits this iteration best? Choose one:
                  * Workflow Agents
                  * Retrieval-Augmented Generation (RAG)
                  * Agents
                  * Multi-Agent Systems


Agents (One) 
[Multi-Agent Systems & MCP - We will only escalate to a more complex multi-agent architecture if we encounter specific limitations, such as performance degradation or tool-selection confusion with a large number of tools, which are established reasons for adopting multi-agent systems]
Architecture Diagram:
Sketch a rough block diagram to visualize your design flow. Use tools like Excalidraw, Canva, or draw directly in your presentation template.
Sources: 
                  * https://excalidraw.com/
                  * https://www.eraser.io/ 
                  * https://www.canva.com/ 
TBD
Sample Inputs:
What inputs will your system take in this iteration? Think carefully about what the system needs to function.
                  * For Workflow Agents: Mostly system and user prompts.
                  * For RAG: Prompts plus the right context. What should your context ideally contain?
                  * For Agents: Inputs may include prompts, context, and memory (short or long-term).
If your system has multiple steps, consider any intermediate inputs. A block diagram helps map this out.
User query or a system-detected event (e.g., large inventory increase). The agent will also use intermediate inputs from its tool.
                  * We will further assume that product matching has been resolved and that we can compare products using a common identifier like a  Universal Product Code (UPC, United States and Canada) or Global Trade Item Number (GTIN, global standard), allowing the system to focus on the core RAG workflow without the added complexity of real-time scraping and semantic matching  (for the product titles)
See CSV in SLACK @Issi - add to the GDrive folder
The right context = data sources: 
                  * Internal DB or API for competitor prices - scraping (if feasible, implement in demo)
                  * Internal DB for stock levels
                  * External zip code
                  * External weather
                  * External macroeconomic


Expected Outputs:
What should the outputs look like? A simple description is enough—no need for exact sample responses.
A structured text report summarizing the current market (our demand & competitors) situation, supporting data, and a clear pricing recommendation. (at SKU level)
                  * Table with the combination of zip code & product, product_id, approval threshold, weather, recommended price and short reasoning 
A pricing recommendation coupled with a "what-if" analysis showing projected impact on revenue and profit margin; includes explanation and action options (to accept or not)
                  * Scenarios for human approval  - conservative, middle, aggressive 
An automated alert sent via Slack/email containing a proposed price change and its simulated impact, along with a button for one-click approval that pushes the change to a staging environment. 
Intermediate Steps / Notes:
Do you need to capture any intermediate logic or decisions (e.g., classification gates, routing logic)?
!!!! Mathematical validation against price and stock thresholds !!!!
Additional Components:
Beyond LLMs and orchestration, do you need any additional services or tools? For example:
                  * For RAG, brainstorm requirements for choosing a vector database. Consider properties like latency, search type, filtering, etc. (Reference: https://superlinked.com/vector-db-comparison)
                  * [Optional] Any chunking, embedding, or data parsing requirements? Sometimes it's not easy to make these decisions without data, so don't sweat it.
Vector DB
Tool Usage (if needed):
If your system needs external tools or APIs, list them here (e.g., Gmail API, Slack client, Weather app, Calculator).
                  * Weather tool 
                  * Macroeconimic - industry reports, news, social media (virality of a certain product)
                  * Zip Code
________________


2. If Using Autonomous Agents (if applicable)
                  * Do you need memory? If yes, what type—short-term or long-term? Look up Lesson 7 for resources
                  * Would multi-agents be used? If yes, what model fits—hierarchical (one orchestrator) or flat (peer-to-peer communication)?
                  * What context would each agent need to perform its tasks?


                  * Memory - yes - short-term (especially for scenarios) → start with episodic one
                  * Procedural Memory could potentially help us with the prompts 
                  * Context - SKU info, real-time info, simulation results 
We will only escalate to a more complex multi-agent architecture if we encounter specific limitations, such as performance degradation or tool-selection confusion with a large number of tools, which are established reasons for adopting multi-agent systems
[Multi-Agents: Yes, a hierarchical pattern will be used for control and clarity.

                  * Orchestrator Agent: Manages the overall workflow.
                  * Monitoring Agent: Scans data streams for predefined triggers.
                  * Analysis & Simulation Agent: Performs the RAG and tool-use functions from Iteration 2.
                  * Communications Agent: Drafts and sends notifications to the team.]


________________


3. Evaluation & Optimization
                  * For each major component, define how you’ll evaluate it. Refer to the evaluation metrics from Lesson 8  
                  * Are there any intermediate metrics that would help track progress?
                  * What optimization techniques make sense based on your data, goals, or constraints? Reference Lessons 5 & 6 for ideas


Evaluation:
                  * Persona authorisation match 
                  * All tools
                  * Tool Calling Accuracy: To measure if the agent correctly calls the simulation tool with the right parameters. 
                  * Semantic Match
                  * Semantic Matchig Evaluation CRITICAL - Very strict - apples to apples - product size for example 
                  * Scraping / Real-time prices & Semantic match   - we need to make sure these are the right ones with respect to groundtruth data 
                  * Tool Social Media
                  * LLM as a judge - gets the sentiment score of the product and checks against whatever the tool determined as the sentiment 
                  * Task Success Rate: To evaluate if the agent successfully completes the end-to-end task of generating a recommendation and a valid simulation. 
Optimization:
                  * ReAct Pattern: This is ideal as the agent needs to synergize reasoning (deciding on a price) and acting (calling the simulation tool). 
                  * Short-Term Memory: Utilize a summarized history of the conversation to handle follow-up questions from the analyst regarding the simulation.




________________


4. Cost, Latency & Effort Analysis
                  * Call out anything in this iteration that adds cost or latency. You don’t need to calculate—just list the key factors. Refer to Lesson 9 for ideas
                  * Use this rough rule of thumb for effort levels:
                  * Model changes > Pipeline changes > Prompt updates (most to least effort)
Cost/Latency Factors: Higher operational costs due to continuous monitoring and the coordination overhead of multiple LLM agents communicating with each other.
Effort: High. Requires complex orchestration logic, more tools, more evaluations and robust security for autonomous tool use.


________________


5. Business & Compliance Considerations
                  * What guardrails are needed for safety and reliability? Briefly describe what you’d implement (e.g., AI model, heuristic, validation step). Reference
                  * Are there compliance needs specific to your use case or industry?
                  * How will you handle data privacy, security, and regulatory concerns in your design?


                  * Strict Tool Security: Implement security measures like tool signing and limited permissions to prevent unauthorized actions.
                  * Monitor for tool poisoning: a tool with bad intentions 😀
                  * Audit Trails: Maintain comprehensive logs of all agent decisions and actions for compliance and debugging.
                  * The HITL approval for pushing any changes to production remains a non-negotiable final guardrail.
                  * Guardrails: 
                  * Implement a factual consistency check using an comparisons to labelled data as groundtruth to ensure the output is grounded in the retrieved context. 
                  * The system will enforce guardrails to ensure analysts can only price products within their assigned categories, preventing both errors and unauthorized changes. Preferably, this can be handled by the platform's authentication system in order to avoid complexity in the AI system.
                  * Input guardrail - it should be asking ONLY pricing-related questions 
                  * Consider - not greater than the MRP, margin etc. 
                  * Data access will be restricted to authorized analysts.
                  * Different personas
                  * Different levels within the hierarchy - analyst, CFO etc. . If we can constrict the access at the platform system; avoid complexity in the AI system
                  * The software responsible for the price update will handle the permissions 
                  * Concurrency
                  * Define it in the software system (for example only a particular category is assigned to an analyst);


________________


Step 3: Poster Design
Poster template here
Once you’ve completed all iterations and have your notes ready, use them to create summaries and fill out the poster template below. If you’ve already sketched your block diagrams, this step should take around 10-15 minutes.
Fill in the table in your group’s poster template and decide on any optimizations or implementation work you want to tackle over the week before Demo Day.
Make sure to finalize one or two presenters for Demo Day—no more than two people presenting per team.
One or two people from the team can own the implementation since it’s harder to coordinate across the entire group. Implementation is optional but will earn your team bonus points.
If you implement any optimization, you’ll be rewarded as well. No submissions are needed, just share your demo
Step 4: Demo
Ideas   
V2 
                  * Add scraping if possible 
                  * OBSERVABILITY - Comet!!!!
EDGE CASES we can add them to the presentation 
                  * Max out inventory - max price
                  * A lot of inventory - bottom price 
________________
Ideas / ToDos: 
                     * Provide examples -  Blackfriday 
                     * Mention discussion for iteration 3 
                     * Ask about how much time we have in the presentation
                     * Promts